#!/usr/bin/env python3
"""
MLflow Setup and Configuration for NBA Simulator
Sets up ML tracking, model registry, and experiment management
"""

import os
import sys
import logging
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def setup_mlflow_directories():
    """Create necessary MLflow directories"""
    base_dir = Path(__file__).parent.parent.parent  # nba-simulator-aws root

    directories = {
        'mlruns': base_dir / 'mlruns',
        'mlartifacts': base_dir / 'mlartifacts',
        'models': base_dir / 'models',
        'logs': base_dir / 'logs' / 'mlflow'
    }

    created = []
    for name, path in directories.items():
        if not path.exists():
            path.mkdir(parents=True, exist_ok=True)
            created.append(str(path))
            logger.info(f"✓ Created {name} directory: {path}")
        else:
            logger.info(f"  {name} directory exists: {path}")

    return directories, created


def create_mlflow_config():
    """Create MLflow configuration file"""
    base_dir = Path(__file__).parent.parent.parent

    config_content = """# MLflow Configuration for NBA Simulator
# Auto-generated by setup_mlflow.py

# Tracking Server Configuration
MLFLOW_TRACKING_URI=file://./mlruns
MLFLOW_ARTIFACT_LOCATION=file://./mlartifacts

# Experiment Configuration
MLFLOW_EXPERIMENT_NAME=nba_simulator
MLFLOW_DEFAULT_ARTIFACT_ROOT=./mlartifacts

# Registry Configuration
MLFLOW_REGISTRY_URI=file://./mlruns

# Logging
MLFLOW_LOG_LEVEL=INFO
"""

    config_file = base_dir / '.mlflowrc'

    with open(config_file, 'w') as f:
        f.write(config_content)

    logger.info(f"✓ Created MLflow config: {config_file}")

    return config_file


def create_mlflow_wrapper():
    """Create Python wrapper for MLflow functionality"""
    base_dir = Path(__file__).parent.parent.parent

    wrapper_content = '''"""
MLflow Integration for NBA Simulator
Provides easy-to-use interface for experiment tracking and model registry
"""

import mlflow
import mlflow.sklearn
import mlflow.xgboost
from pathlib import Path
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)


class MLflowTracker:
    """Wrapper for MLflow tracking in NBA Simulator"""

    def __init__(self, experiment_name: str = "nba_simulator"):
        """Initialize MLflow tracker"""
        self.experiment_name = experiment_name
        self.setup()

    def setup(self):
        """Set up MLflow tracking"""
        # Set tracking URI to local directory
        tracking_uri = "file://./mlruns"
        mlflow.set_tracking_uri(tracking_uri)

        # Set experiment
        try:
            mlflow.set_experiment(self.experiment_name)
            logger.info(f"MLflow experiment: {self.experiment_name}")
        except Exception as e:
            logger.error(f"Failed to set experiment: {e}")

    def start_run(self, run_name: str, tags: Optional[Dict[str, str]] = None):
        """Start MLflow run"""
        return mlflow.start_run(run_name=run_name, tags=tags or {})

    def log_params(self, params: Dict[str, Any]):
        """Log parameters"""
        mlflow.log_params(params)

    def log_metrics(self, metrics: Dict[str, float], step: Optional[int] = None):
        """Log metrics"""
        mlflow.log_metrics(metrics, step=step)

    def log_artifact(self, local_path: str, artifact_path: Optional[str] = None):
        """Log artifact"""
        mlflow.log_artifact(local_path, artifact_path=artifact_path)

    def log_model(self, model, artifact_path: str, **kwargs):
        """Log model"""
        if hasattr(model, 'get_params'):  # Sklearn-style
            mlflow.sklearn.log_model(model, artifact_path, **kwargs)
        else:
            logger.warning(f"Unsupported model type: {type(model)}")

    def register_model(self, model_uri: str, name: str):
        """Register model in model registry"""
        try:
            result = mlflow.register_model(model_uri, name)
            logger.info(f"Registered model: {name} (version {result.version})")
            return result
        except Exception as e:
            logger.error(f"Failed to register model: {e}")
            return None

    def load_model(self, model_name: str, version: Optional[int] = None):
        """Load model from registry"""
        try:
            if version:
                model_uri = f"models:/{model_name}/{version}"
            else:
                model_uri = f"models:/{model_name}/latest"

            model = mlflow.sklearn.load_model(model_uri)
            logger.info(f"Loaded model: {model_uri}")
            return model
        except Exception as e:
            logger.error(f"Failed to load model: {e}")
            return None


# Example usage
if __name__ == "__main__":
    tracker = MLflowTracker("nba_simulator_test")

    with tracker.start_run("test_run"):
        tracker.log_params({"test_param": "value"})
        tracker.log_metrics({"test_metric": 0.95})
        print("✓ MLflow tracking test successful!")
'''

    wrapper_file = base_dir / 'scripts' / 'ml' / 'mlflow_tracker.py'

    with open(wrapper_file, 'w') as f:
        f.write(wrapper_content)

    logger.info(f"✓ Created MLflow wrapper: {wrapper_file}")

    return wrapper_file


def create_requirements_mlflow():
    """Add MLflow to requirements if not present"""
    base_dir = Path(__file__).parent.parent.parent
    req_file = base_dir / 'requirements.txt'

    mlflow_packages = [
        'mlflow>=2.8.0',
        'scikit-learn>=1.3.0',
        'xgboost>=2.0.0'
    ]

    if req_file.exists():
        with open(req_file, 'r') as f:
            existing = f.read()

        missing = []
        for package in mlflow_packages:
            package_name = package.split('>=')[0]
            if package_name not in existing:
                missing.append(package)

        if missing:
            with open(req_file, 'a') as f:
                f.write('\n# MLflow and ML dependencies\n')
                for package in missing:
                    f.write(f'{package}\n')
            logger.info(f"✓ Added {len(missing)} packages to requirements.txt")
        else:
            logger.info("  All MLflow packages already in requirements.txt")
    else:
        logger.warning("requirements.txt not found")

    return mlflow_packages


def test_mlflow_setup():
    """Test MLflow configuration"""
    logger.info("\nTesting MLflow setup...")

    try:
        import mlflow

        # Set tracking URI
        mlflow.set_tracking_uri("file://./mlruns")

        # Create test experiment
        experiment_name = "nba_simulator_setup_test"
        mlflow.set_experiment(experiment_name)

        # Create test run
        with mlflow.start_run(run_name="setup_test") as run:
            mlflow.log_param("test_param", "setup_value")
            mlflow.log_metric("test_metric", 1.0)

            logger.info(f"✓ Test run created: {run.info.run_id}")

        logger.info("✓ MLflow setup test PASSED")
        return True

    except ImportError:
        logger.warning("⚠  MLflow not installed. Run: pip install mlflow")
        return False
    except Exception as e:
        logger.error(f"✗ MLflow setup test FAILED: {e}")
        return False


def main():
    """Main setup routine"""
    logger.info("=" * 80)
    logger.info("MLflow Setup for NBA Simulator")
    logger.info("=" * 80)

    # 1. Create directories
    logger.info("\n1. Creating MLflow directories...")
    directories, created = setup_mlflow_directories()

    # 2. Create config file
    logger.info("\n2. Creating MLflow configuration...")
    config_file = create_mlflow_config()

    # 3. Create Python wrapper
    logger.info("\n3. Creating MLflow wrapper...")
    wrapper_file = create_mlflow_wrapper()

    # 4. Update requirements
    logger.info("\n4. Updating requirements.txt...")
    packages = create_requirements_mlflow()

    # 5. Test setup
    logger.info("\n5. Testing MLflow setup...")
    test_passed = test_mlflow_setup()

    # Summary
    logger.info("\n" + "=" * 80)
    logger.info("SETUP SUMMARY")
    logger.info("=" * 80)

    logger.info("\nDirectories created:")
    for directory in created:
        logger.info(f"  ✓ {directory}")

    logger.info("\nFiles created:")
    logger.info(f"  ✓ {config_file}")
    logger.info(f"  ✓ {wrapper_file}")

    if test_passed:
        logger.info("\n✅ MLflow setup COMPLETE!")
        logger.info("\nNext steps:")
        logger.info("  1. Install MLflow: pip install mlflow")
        logger.info("  2. Import tracker: from scripts.ml.mlflow_tracker import MLflowTracker")
        logger.info("  3. Start tracking experiments in your training scripts")
        logger.info("  4. View UI: mlflow ui --backend-store-uri ./mlruns")
    else:
        logger.info("\n⚠️  MLflow setup complete but test failed")
        logger.info("Please install MLflow: pip install mlflow")

    logger.info("=" * 80)


if __name__ == "__main__":
    main()
