# CI/CD Pipeline - IMPORTANT 7
name: NBA MCP CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run nightly tests
    - cron: "0 2 * * *"

env:
  PYTHON_VERSION: "3.12"

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install flake8 black mypy bandit pylint

      - name: Lint with flake8
        run: |
          flake8 mcp_server/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 mcp_server/ --count --max-complexity=15 --max-line-length=120 --statistics

      - name: Check formatting with black
        run: |
          black --check mcp_server/

      - name: Type check with mypy
        run: |
          mypy mcp_server/ --ignore-missing-imports
        continue-on-error: true

      - name: Security scan with bandit
        run: |
          bandit -r mcp_server/ -ll

  # Unit Tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: nba_stats_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run unit tests
        env:
          DB_HOST: localhost
          DB_USER: postgres
          DB_PASSWORD: test_password
          DB_NAME: nba_stats_test
          REDIS_HOST: localhost
          USE_LOCAL_CREDENTIALS: true
        run: |
          pytest tests/ -v --cov=mcp_server --cov-report=xml --cov-report=term --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Archive coverage results
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov/

  # Integration Tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Start services with Docker Compose
        run: |
          docker-compose -f docker-compose.dev.yml up -d
          sleep 30  # Wait for services to start

      - name: Run integration tests
        env:
          RUN_INTEGRATION_TESTS: 1
        run: |
          pip install pytest
          pytest tests/ -v -m integration

      - name: Stop services
        if: always()
        run: |
          docker-compose -f docker-compose.dev.yml down -v

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Full history for secret scanning

      # Secret scanning with trufflehog
      - name: Scan for secrets with trufflehog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

      # Scan with git-secrets
      - name: Install git-secrets
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            brew install git-secrets
          else
            git clone https://github.com/awslabs/git-secrets.git /tmp/git-secrets
            cd /tmp/git-secrets
            sudo make install
          fi

      - name: Scan with git-secrets
        run: |
          git secrets --install
          git secrets --register-aws
          if [[ -f ".git-secrets-patterns" ]]; then
            while IFS= read -r line; do
              if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
                git secrets --add "$line" || true
              fi
            done < .git-secrets-patterns
          fi
          git secrets --scan-history || exit 1

      - name: Validate S3 Public Access
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
        run: |
          pip install boto3
          python scripts/validate_s3_public_access.py --fail-on-public

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

  # Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: nba-mcp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, integration]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          echo "Deploying to staging..."
          # Add ECS deployment commands here

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, integration]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to ECS
        run: |
          echo "Deploying to production..."
          # Add ECS deployment commands here

      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: production
          ref: ${{ github.sha }}

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands

      - name: Notify deployment
        if: success()
        run: |
          echo "âœ… Deployment successful!"
          # Add Slack/email notification here
